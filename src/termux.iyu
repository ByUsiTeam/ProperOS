<View id="3" did="0" type="RelativeLayout">
<ppt>width=-1
height=-1</ppt>
<event></event>
</View>
<View id="1" did="3" type="LinearLayout">
<ppt>width=-1
height=-1
orientation=vertical
gravity=bottom
background=black
</ppt>
<event></event>
</View>
<View id="13" did="1" type="LinearLayout">
<ppt>width=-1
height=-1
orientation=vertical
gravity=top</ppt>
<event></event>
</View>
<View id="2" did="13" type="RecyclerView">
<ppt>width=-1
height=-1</ppt>
<event><eventItme type="clickitem">ulag(st_vW,st_pN,1,目标)
s c= 内容
utw(a, "", 目标, "", "", false, v)
{
  syso("点击了")
}
else
{
  syso("点击了")
}</eventItme></event>
</View>
<View id="10" did="1" type="LinearLayout">
<ppt>width=-1
height=55dp
orientation=horizontal
gravity=bottom</ppt>
<event></event>
</View>
<View id="11" did="10" type="Button">
<ppt>width=55dp
height=55dp
text=上传\n运行
textColor=#ffffffff
background=through</ppt>
<event><eventItme type="clicki">ug(8,"text",t)
us(8,"text","")
f(t ?* "zx ")
{
  sj(t,"zx ",null,t)
  fw("$temp/jb/jpjb.txt",t)
  fn juos.脚本("$temp/jb/jpjb.txt")
}
else f(t ?* "ui ")
{
  sj(t,"ui ",null,ui)
  uigo(ui)
}
else f(t == "exit")
{
  end()
}
else f(t ?* "echo ")
{
  sj(t,"echo ",null,nr)
  fn juos.输出(nr)
}
else f(t ?* "bash ")
{
  sj(t,"bash ",null,jb)
  f(jb != null && jb != "")
  {
    fn juos.脚本(jb)
  }
}
else
{
  fn juos.执行(t)
}</eventItme></event>
</View>
<View id="12" did="10" type="EditText">
<ppt>width=-1
height=-1
text=
textColor=#ffffffff</ppt>
<event></event>
</View>
<View id="9" did="3" type="LinearLayout">
<ppt>width=-1
height=-1
orientation=vertical
gravity=bottom
visibility=gone</ppt>
<event></event>
</View>
<View id="5" did="9" type="LinearLayout">
<ppt>width=-1
height=55dp
orientation=horizontal
gravity=bottom</ppt>
<event></event>
</View>
<View id="7" did="5" type="Button">
<ppt>width=55dp
height=55dp
text=上传\n运行
textColor=#ffffffff
background=through</ppt>
<event><eventItme type="clicki">ug(8,"text",t)
us(8,"text","")
f(t ?* "zx ")
{
  sj(t,"zx ",null,t)
  fw("$temp/jb/jpjb.txt",t)
  fn 输出框架.脚本("$temp/jb/jpjb.txt")
}
else f(t ?* "ui ")
{
  sj(t,"ui ",null,ui)
  uigo(ui)
}
else f(t == "exit")
{
  end()
}
else f(t ?* "echo ")
{
  sj(t,"echo ",null,nr)
  fn 输出框架.输出(nr)
}
else f(t ?* "bash ")
{
  sj(t,"bash ",null,jb)
  f(jb != null && jb != "")
  {
    fn 输出框架.脚本(jb)
  }
}
else
{
  fn 输出框架.输出("这个，您输入的是一个我不知道的表达式呢")
}</eventItme></event>
</View>
<View id="8" did="5" type="EditText">
<ppt>width=-1
height=-1
text=
textColor=#ffffffff</ppt>
<event></event>
</View>
<UIEventset><eventItme type="loading">/.用法
复制 输出框架.iyu 输出框架.myu 输出框架.mjava
三个文件到你项目的src
然后在需要用到这个框架的界面添加一个v7列表

使用
fn 输出框架.初始化(v7列表的id)
对输出框架进行初始化

使用
fn 执行(单个iapp代码的文本)
可以执行单个iapp代码

使用
fn 输出框架.脚本("脚本的路径")
提供的测试脚本去除了相关网页的信息,防止对相关网页进行
运行iapp代码串

若旅开源
QQ3345997605
仅用作学习交流
参考了多个大佬的代码
./
fn zx_api.初始化(2)
//fn 输出框架.脚本("@脚本.txt")
//这个脚本是测试脚本,提供写法参考,具体网址已去除</eventItme><eventItme type="loadingComplete">fn qp.qp2()
fn zx_api.输出("bash 要执行的脚本地址（注意，暂时只支持iApp表达式）")
fn zx_api.输出("ui 要跳转的页面名称（注意，后面必须要有.iyu）")
fn zx_api.输出("zx 要执行的iApp代码，注意可以换行")</eventItme></UIEventset>