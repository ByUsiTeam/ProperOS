function file_to_hex(file_path)
    -- 以二进制模式打开文件
    local file = io.open(file_path, "rb")
    if not file then
        -- print("文件打开失败")
        return
    end

    -- 读取文件内容
    local content = file:read("*a")
    file:close()

    -- 将二进制内容转换为16进制片段
    local hex_str = ""
    for i = 1, #content do
        hex_str = hex_str .. string.format("%02X", string.byte(content, i))
    end

    -- 打印16进制片段
    -- print(hex_str)
    return hex_str
end

function hex_to_file(hex_str, output_path)
    -- 检查hex_str长度是否为偶数
    if #hex_str % 2 ~= 0 then
        -- print("错误：十六进制字符串长度必须为偶数")
        return false
    end

    -- 以二进制模式打开文件用于写入
    local file = io.open(output_path, "wb")
    if not file then
        -- print("文件创建/打开失败")
        return false
    end

    -- 将十六进制字符串转换为二进制数据
    for i = 1, #hex_str, 2 do
        local byte_str = hex_str:sub(i, i+1)
        local byte = tonumber(byte_str, 16)
        if not byte then
            -- print("错误：无效的十六进制字符 '" .. byte_str .. "'")
            file:close()
            return false
        end
        file:write(string.char(byte))
    end

    file:close()
    return true
end


function file_to_binary(file_path)
    local file = io.open(file_path, "rb")
    if not file then return nil end

    local binary_data = {}
    while true do
        local chunk = file:read(4096)  -- 分块读取，避免大文件内存问题
        if not chunk then break end
        binary_data[#binary_data + 1] = chunk
    end
    file:close()

    return table.concat(binary_data)  -- 合并所有块
end

function binary_to_file(binary_data, output_path)
    -- 检查输入是否为字符串
    if type(binary_data) ~= "string" then
        -- print("错误：输入数据必须是二进制字符串")
        return false
    end

    -- 以二进制模式打开文件用于写入
    local file = io.open(output_path, "wb")
    if not file then
        -- print("错误：无法创建/打开文件 '" .. output_path .. "'")
        return false
    end

    -- 写入二进制数据
    file:write(binary_data)
    file:close()
    return true
end


-- 将文本字符串转换为二进制数据（返回二进制字符串）
function text_to_binary(text)
    if type(text) ~= "string" then
        -- print("错误：输入必须是字符串")
        return nil
    end
    return text  -- 在Lua中字符串已经是二进制安全的
end

-- 更详细的版本（带字节数组输出选项）
function text_to_binary_ex(text, return_as_table)
    if type(text) ~= "string" then
        -- print("错误：输入必须是字符串")
        return nil
    end
    
    if return_as_table then
        local byte_array = {}
        for i = 1, #text do
            byte_array[i] = string.byte(text, i)
        end
        return byte_array
    else
        return text  -- 直接返回字符串本身就是二进制数据
    end
end